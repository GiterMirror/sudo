dnl Process this file with GNU autoconf to produce a configure script.
AC_INIT(sudo.h)
AC_CONFIG_HEADER(config.h)
dnl
dnl This won't work before AC_INIT()
dnl
echo "Configuring CU Sudo version 1.4.3"
dnl
dnl Variables that get substituted in the Makefile
dnl
PROGS="sudo visudo"
AC_SUBST(CFLAGS)dnl
AC_SUBST(PROGS)dnl
SUDO_LDFLAGS=""
AC_SUBST(SUDO_LDFLAGS)dnl
VISUDO_LDFLAGS=""
AC_SUBST(VISUDO_LDFLAGS)dnl
SUDO_LIBS=""
AC_SUBST(SUDO_LIBS)dnl
VISUDO_LIBS=""
AC_SUBST(VISUDO_LIBS)dnl
CPPFLAGS=""
AC_SUBST(CPPFLAGS)dnl
OSDEFS=""
AC_SUBST(OSDEFS)dnl
OPTIONS=""
AC_SUBST(OPTIONS)dnl
DCE_OBJS=""
AC_SUBST(DCE_OBJS)dnl
LIBOBJS=""
AC_SUBST(LIBOBJS)dnl
TGETPASS="tgetpass.o"
AC_SUBST(TGETPASS)dnl
MANTYPE="man"
AC_SUBST(MANTYPE)dnl
MAN_POSTINSTALL=""
AC_SUBST(MAN_POSTINSTALL)dnl

dnl
dnl Override default configure dirs...
dnl
test "$mandir" = '${prefix}/man' && mandir='$(prefix)/man'
test "$bindir" = '${exec_prefix}/bin' && bindir='$(exec_prefix)/bin'
test "$sbindir" = '${exec_prefix}/sbin' && sbindir='$(exec_prefix)/etc'
test "$sysconfdir" = '${prefix}/etc' && sysconfdir='/etc'

dnl
dnl Options for --with
dnl

AC_ARG_WITH(CC, [  --with-CC               C compiler to use],
[case $with_CC in
    yes)	echo "Must give --with-CC an argument."
		exit 1
		;;
    no)		echo "Illegal argument: --without-CC."
		exit 1
		;;
    *)		CC=$with_CC
		;;
esac])

AC_ARG_WITH(getpass, [  --with-getpass          use system getpass(3)],
[case $with_getpass in
    yes)	AC_DEFINE(USE_GETPASS)
		echo 'Using system getpass'
		TGETPASS=""
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-getpass: $with_getpass"
		;;
esac])

AC_ARG_WITH(C2, [  --with-C2               enable C2 security (shadow password) support],
[case $with_C2 in
    yes)	AC_DEFINE(HAVE_C2_SECURITY)
		echo 'Configuring for C2 security (shadow passwords)'
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-C2: $with_C2"
		;;
esac])

AC_ARG_WITH(skey, [  --with-skey             enable S/Key support ],
[case $with_skey in
    yes)	AC_DEFINE(HAVE_SKEY)
		echo 'Configuring for use with S/Key'
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-skey: $with_skey"
		;;
esac])

AC_ARG_WITH(SecurID, [  --with-SecurID          enable SecurID support],
[case $with_SecurID in
    yes)	AC_DEFINE(HAVE_SECURID)
		echo 'Configuring for use with SecurID'
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-SecurID: $with_SecurID"
		;;
esac])

AC_ARG_WITH(kerb4, [  --with-kerb4            enable kerberos v4 support],
[case $with_kerb4 in
    yes)	AC_DEFINE(HAVE_KERB4)
		echo 'Configuring for use with Kerberos version 4'
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-kerb4: $with_kerb4"
		;;
esac])

AC_ARG_WITH(kerb5, [  --with-kerb5            enable kerberos v5 support],
[case $with_kerb5 in
    yes)	AC_DEFINE(HAVE_KERB5)
		echo 'Configuring for use with Kerberos version 5'
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-kerb5: $with_kerb5"
		;;
esac])

AC_ARG_WITH(AFS, [  --with-AFS              enable AFS support],
[case $with_AFS in
    yes)	AC_DEFINE(HAVE_AFS)
		echo 'Configuring for use with AFS'
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-AFS: $with_AFS"
		;;
esac])

AC_ARG_WITH(DCE, [  --with-DCE              enable DCE support],
[case $with_DCE in
    yes)	AC_DEFINE(HAVE_DCE)
		echo 'Configuring for use with DCE'
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-DCE: $with_DCE"
		;;
esac])

AC_ARG_WITH(csops, [  --with-csops            add CSOps standard options],
[case $with_csops in  
    yes)	OPTIONS="${OPTIONS} -DIGNORE_DOT_PATH -DUSE_INSULTS -DCLASSIC_INSULTS -DCSOPS_INSULTS -DENV_EDITOR"
		sbindir='$(exec_prefix)/sbin'
		echo 'CSOps--adding options: IGNORE_DOT_PATH USE_INSULTS CLASSIC_INSULTS CSOPS_INSULTS ENV_EDITOR'
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-csops: $with_csops"
		;;
esac])

dnl
dnl If we don't have egrep we can't do anything...
dnl
AC_CHECK_PROG(EGREPPROG, egrep, egrep, )
if test -z "$EGREPPROG"; then
    echo "Sorry, configure requires egrep to run."
    exit
fi

dnl
dnl C compiler checks
dnl
cross_compiling="no"
AC_PROG_CC
AC_PROG_CPP
AC_ISC_POSIX

dnl
dnl find programs we use
dnl
AC_CHECK_PROG(UNAMEPROG, uname, uname, )
AC_CHECK_PROG(TRPROG, tr, tr, )
AC_CHECK_PROG(SEDPROG, sed, sed, )
AC_CHECK_PROG(NROFFPROG, nroff, nroff, )
if test -z "$NROFFPROG"; then
    MANTYPE="cat"
fi

dnl
dnl Is this OS using shadow passwords?
dnl (Cannot auto-check for C2 if using non-passwd based authentication)
dnl
if test -z "$with_C2" -a "$with_skey" != "yes" -a "$with_SecurID" != "yes" -a "$with_AFS" != "yes" -a "$with_DCE" != "yes" -a "$with_kerb4" != "yes" -a "$with_kerb5" != "yes"; then
    SUDO_CHECK_SHADOW(AC_DEFINE(HAVE_C2_SECURITY)
    with_C2="yes")
elif test -z "$with_C2"; then
    echo "Unable to check for shadow passwords. If you have them you should use --with-C2 (unless they are on by default for your OS, see INSTALL)."
fi

dnl
dnl what architecture are we on?
dnl
SUDO_OSTYPE
OS=`echo $OS | $TRPROG '[[A-Z]]' '[[a-z]]'`
case "$OS" in
    "sunos")	echo "Looks like SunOS 4.x"
		LIB_NSL=1
		if test "$with_C2" = "yes"; then
		    SHADOW_TYPE="SPW_SUNOS4"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		fi
		;;
    "solaris")	echo "Looks like Solaris"
		if test "$with_C2" != "no"; then
		    with_C2="yes"
		    SHADOW_TYPE="SPW_SVR4"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		fi
		;;
    "aix")	echo "Looks like AIX"
		AC_DEFINE(_ALL_SOURCE)
		SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-bI:\$(srcdir)/aixcrypt.exp"
		;;
    "hp-ux")	echo "Looks like HP-UX $OSREV"
		
		# uncomment this for a statically linked sudo
		# (XXX - should be an option to configure)
		#STATIC_SUDO=true

		if test "$OSREV" -lt 9; then
		    AC_DEFINE(BROKEN_SYSLOG)
		    if test -n "$GCC"; then
			SUDO_LDFLAGS="${SUDO_LDFLAGS} -static"
		    else
			SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-a,archive"
		    fi
		elif test "$OSREV" -eq 9; then
		    AC_DEFINE(BROKEN_SYSLOG)

		    if test -n "$STATIC_SUDO"; then
			if test -n "$GCC"; then
			    SUDO_LDFLAGS="${SUDO_LDFLAGS} -static"
			else
			    SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-a,archive"
			fi
		    fi

		    # DCE support
		    if test "$with_DCE" = "yes"; then
			# order of libs in 9.X is important. -lc_r must be last
			SUDO_LIBS="-ldce -lM -lc_r"

			if test -n "$GCC"; then
			    CPPFLAGS="${CPPFLAGS} -D_HPUX_SOURCE -D_REENTRANT -I/usr/include/reentrant"
			else
			    CPPFLAGS="${CPPFLAGS} -Aa -D_HPUX_SOURCE -D_REENTRANT -I/usr/include/reentrant"
			fi
		    fi

		    # shadow pw support
		    # XXX - can't hpux 10 use svr4-style shadow?
		    if test "$with_C2" = "yes"; then
			SHADOW_TYPE="SPW_HPUX9"
			AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		    fi
		elif test "$OSREV" -eq 10; then
		    if test -n "$STATIC_SUDO"; then
			if test -n "$GCC"; then
			    SUDO_LDFLAGS="${SUDO_LDFLAGS} -static"
			else
			    SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-a,archive"
			fi
		    fi

		    # DCE support (requires ANSI C compiler)
		    if test "$with_DCE" = "yes"; then
			if test -n "$GCC"; then
			    CPPFLAGS="${CPPFLAGS} -D_HPUX_SOURCE"
			else
			    CPPFLAGS="${CPPFLAGS} -Aa -D_HPUX_SOURCE"
			fi
		    fi

		    # shadow pw support
		    if test "$with_C2" = "yes"; then
			SHADOW_TYPE="SPW_HPUX10"
			AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
			SUDO_LIBS="${SUDO_LIBS} /usr/lib/libsec.1"
		    fi
		fi

		# AFS support
		if test "$with_AFS" = "yes"; then
		    SUDO_LIBS="-lBSD ${SUDO_LIBS}"
		fi
		;;
    "osf1")	echo "Looks like OSF/1"
		SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-no_library_replacement"
		# C2 security stuff
		if test "$with_C2" = "yes"; then
		    SUDO_LIBS="${SUDO_LIBS} -lsecurity -laud"
		    SHADOW_TYPE="SPW_SECUREWARE"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		fi
		;;
    "irix")	echo "Looks like IRIX"
		# C2 security stuff
		if test "$with_C2" = "yes"; then
		    SHADOW_TYPE="SPW_SVR4"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		fi
		# configure doesn't think irix has stdc headers
		# but it's good enough for sudo
		AC_DEFINE(STDC_HEADERS)
		if test -z "$NROFFPROG"; then
		    MAN_POSTINSTALL='	/bin/rm -f $(mandir)/sudo.$(mansect).z; /usr/bin/pack $(mandir)/sudo.$(mansect)'
		    if test -d /usr/share/catman/local; then
			mandir="/usr/share/catman/local"
		    else
			mandir="/usr/catman/local"
		    fi
		else
		    if test -d "/usr/share/man/local"; then
			mandir="/usr/share/man/local"
		    else
			mandir="/usr/man/local"
		    fi
		fi
		;;
    "linux")	echo "Looks like linux"
		# C2 security stuff
		if test "$with_C2" = "yes"; then
		    SHADOW_TYPE="SPW_SVR4"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		    OSDEFS="${OSDEFS} -DSHADOW_PWD"
		    AC_CHECK_FUNC(getspnam, , SUDO_LIBS="${SUDO_LIBS} -lshadow")
		fi
		;;
    "convex")	echo "Looks like ConvexOs"
		AC_DEFINE(_CONVEX_SOURCE)
		if test -z "$GCC"; then
		    CFLAGS="${CFLAGS} -D__STDC__"
		fi
		# C2 security stuff
		if test "$with_C2" = "yes"; then
		    OSDEFS="${OSDEFS} -D_AUDIT -D_ACL -DSecureWare"
		    SUDO_LIBS="${SUDO_LIBS} -lprot"
		    SHADOW_TYPE="SPW_SECUREWARE"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		fi
		;;
    "ultrix"*)	echo "Looks like ultrix"
		# C2 security stuff
		if test "$with_C2" = "yes"; then
		    SUDO_LIBS="${SUDO_LIBS} -lauth"
		    SHADOW_TYPE="SPW_ULTRIX4"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		fi
		;;
    "riscos")	echo "Looks like RISCos"
		SUDO_LIBS="${SUDO_LIBS} -lsun -lbsd"
		CPPFLAGS="${CPPFLAGS} -I/usr/include -I/usr/include/bsd"
		OSDEFS="${OSDEFS} -D_MIPS"
		;;
    "isc")	echo "Looks like INTERACTIVE"
		LIB_CRYPT=1
		SUDO_LIBS="${SUDO_LIBS} -lcrypt"
		if test "$with_C2" = "yes"; then
		    SUDO_LIBS="${SUDO_LIBS} -lsec"
		    SHADOW_TYPE="SPW_SVR4"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		fi
		OSDEFS="${OSDEFS} -D_ISC"
		;;
    "smp_dc.osx") echo "Looks like Pyramid DC/OSx"
		LIB_SOCKET=1
		SUDO_LIBS="${SUDO_LIBS} -lsocket"

		if test "$with_C2" != "no"; then
		    with_C2="yes"
		    SHADOW_TYPE="SPW_SVR4"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		fi
		;;
    "unix_sv")	echo "Looks like UnixWare"
		LIB_SOCKET=1
		SUDO_LIBS="${SUDO_LIBS} -lsocket"

		if test "$with_C2" != "no"; then
		    with_C2="yes"
		    SHADOW_TYPE="SPW_SVR4"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		fi
		;;
    "sco")	echo "Looks like SCO"
		if test "$with_C2" = "yes"; then
		    SHADOW_TYPE="SPW_SECUREWARE"
		    AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE)
		    SUDO_LIBS="${SUDO_LIBS} -lprot -lx"
		fi
		;;
    "ksr"*)	echo "Looks like a KSR (wow, yours is still running?!?)"
		;;
    "next")	echo "Looks like NeXTstep"
		;;
    "bsd/386" | "bsd/os") echo "Looks like bsdi BSD/OS"
		if test "$with_C2" = "yes"; then
		    SHADOW_TYPE="SPW_BSD"
		fi
		;;
    "mtxinu")	echo "Looks like mt Xinu MORE/BSD"
		;;
    "4.3bsd")	echo "Looks like HP BSD"
		if test "$with_C2" = "yes"; then
		    SHADOW_TYPE="SPW_BSD"
		fi
		;;
    *"bsd"*)	echo "Looks like some kind of BSD"
		;;
    "unknown")	echo "I don't recognize your OS, but that's ok"
		;;
    *)		echo "Hmmm, I don't recognize $OS offhand, but that's ok"
		;;
esac

dnl
dnl search for various shadow password types unless we already know
dnl XXX - need a better default case (define SHADOW_TYPE to *something*)
dnl
if test "$with_C2" = "yes" -a -z "$SHADOW_TYPE"; then
    echo "checking for shadow password type..."
    AC_CHECK_FUNC(getspnam, SHADOW_TYPE="SPW_SVR4", AC_CHECK_FUNC(getprpwuid, SHADOW_TYPE="SPW_SECUREWARE", [test -f /etc/master.passwd && SHADOW_TYPE="SPW_BSD"]))
    case "$SHADOW_TYPE" in
	"SPW_SVR4")		echo "shadow password type is getspnam (svr4)";
		AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE);;
	"SPW_BSD")		echo "shadow password type is /etc/master.passwd (BSD)";;
	"SPW_SECUREWARE")	echo "shadow password type is etprpwuid (SecureWare)";
		SUDO_LIBS="${SUDO_LIBS} -lprot -lx";
		AC_DEFINE_UNQUOTED(SHADOW_TYPE, $SHADOW_TYPE);;
	*)	echo "unknown";
		echo "Unable to determine shadow passwd type, sudo may not be able to verify passwords";;
    esac
fi

dnl
dnl C compiler checks (to be done after os checks)
dnl
AC_PROG_GCC_TRADITIONAL
AC_C_CONST
dnl
dnl Program checks
dnl
AC_PROG_YACC
AC_PROG_INSTALL
SUDO_PROG_SENDMAIL
SUDO_PROG_PWD
SUDO_PROG_MV
SUDO_PROG_BSHELL
SUDO_PROG_VI
dnl
dnl Header file checks
dnl
AC_HEADER_STDC
AC_HEADER_DIRENT
AC_CHECK_HEADERS(string.h strings.h unistd.h malloc.h paths.h utime.h fnmatch.h sys/sockio.h sys/bsdtypes.h)
dnl ultrix termio/termios are broken
if test "$OS" != "ultrix"; then
    AC_CHECK_HEADERS(termio.h)
    AC_CHECK_HEADERS(termios.h, AC_CHECK_FUNCS(tcgetattr))
fi
dnl
dnl typedef checks
dnl
AC_TYPE_MODE_T
AC_TYPE_UID_T
SUDO_TYPE_SIZE_T
SUDO_TYPE_SSIZE_T
SUDO_FULL_VOID
SUDO_UID_T_LEN
SUDO_SOCK_SA_LEN
dnl
dnl only set RETSIGTYPE if it is not set already
dnl
case "$DEFS" in
    *"RETSIGTYPE"*)	;;
    *)			AC_TYPE_SIGNAL;;
esac
dnl
dnl Function checks
dnl
AC_CHECK_FUNCS(strchr strrchr memcpy memset sysconf sigaction tzset strcasecmp)
AC_CHECK_FUNC(innetgr, AC_DEFINE(HAVE_INNETGR) AC_CHECK_FUNCS(getdomainname))
AC_CHECK_FUNC(getwd, AC_DEFINE(HAVE_GETWD), LIBOBJS="$LIBOBJS getwd.o")
AC_CHECK_FUNC(strdup, AC_DEFINE(HAVE_STRDUP), LIBOBJS="$LIBOBJS strdup.o")
AC_CHECK_FUNC(fnmatch, AC_DEFINE(HAVE_FNMATCH), LIBOBJS="$LIBOBJS fnmatch.o")
AC_CHECK_FUNC(lsearch, AC_DEFINE(HAVE_LSEARCH), AC_CHECK_LIB(compat, lsearch, AC_CHECK_HEADER(search.h, AC_DEFINE(HAVE_LSEARCH) SUDO_LIBS="${SUDO_LIBS} -lcompat"; VISUDO_LIBS="${VISUDO_LIBS} -lcompat", LIBOBJS="$LIBOBJS lsearch.o"), LIBOBJS="$LIBOBJS lsearch.o"))
AC_CHECK_FUNC(setenv, AC_DEFINE(HAVE_SETENV), AC_FUNC_CHECK(putenv, AC_DEFINE(HAVE_PUTENV), LIBOBJS="$LIBOBJS putenv.o"))
AC_CHECK_FUNC(utime, AC_DEFINE(HAVE_UTIME)
SUDO_FUNC_UTIME_POSIX
AC_FUNC_UTIME_NULL, LIBOBJS="$LIBOBJS utime.o")
dnl
dnl if crypt(3) not in libc, look elsewhere
dnl
if test -z "$LIB_CRYPT"; then
    AC_CHECK_FUNC(crypt, ,AC_CHECK_LIB(crypt, crypt, SUDO_LIBS="${SUDO_LIBS} -lcrypt", AC_CHECK_LIB(crypt_d, crypt, SUDO_LIBS="${SUDO_LIBS} -lcrypt_d", AC_CHECK_LIB(crypt, ufc, SUDO_LIBS="${SUDO_LIBS} -lufc"))))
fi
dnl
dnl Bison and DCE use alloca(3), if not in libc, look in -lPW
dnl (gcc includes its own alloca(3) but other compilers may not)
dnl
if test "$with_DCE" = "yes" -o "$ac_cv_prog_YACC" = "bison -y"; then
    AC_FUNC_ALLOCA
    if test "$ALLOCA" = "alloca.o"; then
	AC_CHECK_FUNC(alloca, ,AC_CHECK_LIB(PW, alloca, SUDO_LIBS="${SUDO_LIBS} -lPW"; VISUDO_LIBS="${VISUDO_LIBS} -lPW"))
    fi
fi
dnl
dnl library checks
dnl
dnl Irix doesn't want -lnsl or -lsocket (and Irix 4 needs -lsun)
if test "$OS" != "irix"; then
    if test -z "$LIB_NSL"; then
	AC_CHECK_LIB(nsl, main, SUDO_LIBS="${SUDO_LIBS} -lnsl")
    fi
    if test -z "$LIB_SOCKET"; then
	AC_CHECK_LIB(socket, main, SUDO_LIBS="${SUDO_LIBS} -lsocket")
    fi
elif test "$OSREV" -lt 5; then
    AC_CHECK_LIB(sun, getpwnam, [SUDO_LIBS="${SUDO_LIBS} -lsun"
VISUDO_LIBS="${VISUDO_LIBS} -lsun"]
)
fi
AC_CHECK_LIB(inet, main, SUDO_LIBS="${SUDO_LIBS} -linet")
AC_CHECK_LIB(gnumalloc, main, SUDO_LIBS="${SUDO_LIBS} -lgnumalloc"; VISUDO_LIBS="${VISUDO_LIBS} -lgnumalloc")
dnl
dnl Find kerberos includes and libs or complain
dnl
if test "$with_kerb4" = "yes" -o "$with_kerb5" = "yes"; then
    if test -f "/usr/include/kerberosIV/krb.h"; then
	CPPFLAGS="${CPPFLAGS} -I/usr/include/kerberosIV"
    elif test -f "/usr/local/include/kerberosIV/krb.h"; then
	CPPFLAGS="${CPPFLAGS} -I/usr/local/include/kerberosIV"
    elif test -f "/usr/kerberos/include/krb.h"; then
	CPPFLAGS="${CPPFLAGS} -I/usr/kerberos/include"
    elif test -f "/usr/local/kerberos/include/krb.h"; then
	CPPFLAGS="${CPPFLAGS} -I/usr/local/kerberos/include"
    else
	echo 'Unable to locate kerberos include files, you will have to edit the Makefile and add -I/path/to/krb/includes to CPPFLAGS'
    fi

    if test -d "/usr/kerberos/lib"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/kerberos/lib"
    elif test -d "/usr/lib/kerberos"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/lib/kerberos"
    elif test -f "/usr/local/lib/libkrb.a"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/local/lib"
    elif test ! -f "/usr/lib/libkrb.a"; then
	echo 'Unable to locate kerberos libraries, you will have to edit the Makefile and add -L/path/to/krb/libs to SUDO_LDFLAGS'
    fi

    SUDO_LIBS="${SUDO_LIBS} -lkrb -ldes"
    if test "$with_kerb5" = "yes"; then
	SUDO_LIBS="${SUDO_LIBS} -ldes425 -lkrb5 -lcrypto -lcom_err"
    fi
fi

dnl
dnl extra AFS libs
dnl
if test "$with_AFS" = "yes"; then
    if test -d "/usr/lib/afs"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/lib/afs"
    else
	echo 'Unable to locate AFS libraries, you will have to edit the Makefile and add -L/path/to/afs/libs to SUDO_LDFLAGS'
    fi

    SUDO_LIBS="${SUDO_LIBS} -lkauth -lprot -lauth -lubik -lrxkad -lsys -ldes -lrx -llwp -lcom_err -laudit -lutil"
fi

dnl
dnl extra DCE obj + lib
dnl Order of libs in HP-UX 10.x is important, -ldce must be last.
dnl
if test "$with_DCE" = "yes"; then
    DCE_OBJS="${DCE_OBJS} dce_pwent.o"
    SUDO_LIBS="${SUDO_LIBS} -ldce"
fi

dnl
dnl extra Skey lib and includes
dnl
if test "$with_skey" = "yes"; then
    SUDO_LIBS="${SUDO_LIBS} -lskey"
    if test -f /usr/include/skey.h -a -f /usr/lib/libskey.a; then
	:
    elif test -f /usr/local/include/skey.h; then
	CPPFLAGS="${CPPFLAGS} -I/usr/local/include"
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/local/lib"
    elif test "$with_csops" = "yes" -a -f /tools/cs/skey/include/skey.h -a -f /tools/cs/skey/lib/libskey.a; then
	CPPFLAGS="${CPPFLAGS} -I/tools/cs/skey/include"
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/tools/cs/skey/lib"
    else
	echo 'Unable to locate libskey.a and/or skey.h, you will have to edit the Makefile and add -L/path/to/skey/lib to SUDO_LDFLAGS and/or -I/path/to/skey.h to CPPFLAGS'
    fi
fi

dnl
dnl extra SecurID lib + includes
dnl
if test "$with_SecurID" = "yes"; then
    SUDO_LIBS="${SUDO_LIBS} /usr/ace/sdiclient.a"
    CPPFLAGS="${CPPFLAGS} -I/usr/ace"
fi

dnl
dnl Check for log file and timestamp locations
dnl
SUDO_LOGFILE
SUDO_TIMEDIR

dnl
dnl Set exec_prefix
dnl
test "$exec_prefix" = "NONE" && exec_prefix='$(prefix)'

dnl
dnl Substitute into the Makefiles
dnl
AC_OUTPUT(Makefile)
